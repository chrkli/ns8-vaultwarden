#!/bin/bash

# create random hex string as admin token for vaultwarden
# adopted from https://github.com/NethServer/ns8-mariadb/blob/main/imageroot/actions/create-module/02create_secrets
set -e

# create secrets directory if not exist
if [[ ! -d ~/.config/state/secrets ]]; then
    /usr/bin/mkdir -p ~/.config/state/secrets
    /usr/bin/echo 'created directory ~/.config/state/secrets'
fi

plainfile=~/.config/state/secrets/admintoken.plain
hashfile=~/.config/state/secrets/admintoken.hashed

if [[ ! -f ~/.config/state/secrets/admintoken.plain ]]; then
    /usr/bin/echo 'creating random admintoken'
    admintoken=$(/usr/bin/openssl rand -hex 17)
    # save initial admintoken as cleartext to display in UI
    /usr/bin/echo "VAULTWARDEN_ADMINTOKEN=${admintoken}" > $plainfile
    /usr/bin/echo 'initial plain admintoken saved'

    # check if argon2 is available
    if [[ ! $(command -v argon2) ]]; then
        /usr/bin/echo 'OS level argon2 not found, will create hash during configure-module'
    else
        # additionally save admintoken hashed to pass to container (upstream change since v1.28.0)
        /usr/bin/echo 'using OS level argon2 to create hashed version of initial admintoken'
        # use argon2 to hash admintoken (https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page#using-argon2)
        hashedtoken=$(/usr/bin/echo -n $admintoken | /usr/bin/argon2 "$(/usr/bin/openssl rand -base64 32)" -e -id -k 65540 -t 3 -p 4)
        # save hashed token for usage in ENV inside container
        /usr/bin/echo "ADMIN_TOKEN=${hashedtoken}" > $hashfile
        /usr/bin/echo 'inital hashed admintoken saved'
    fi
fi
